<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>下弯的松枝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sitonlotus.github.io/"/>
  <updated>2020-05-29T12:46:35.616Z</updated>
  <id>https://sitonlotus.github.io/</id>
  
  <author>
    <name>刘作莲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工作中常出现的Bug</title>
    <link href="https://sitonlotus.github.io/2020/05/29/bugs_in_working/"/>
    <id>https://sitonlotus.github.io/2020/05/29/bugs_in_working/</id>
    <published>2020-05-29T12:30:07.000Z</published>
    <updated>2020-05-29T12:46:35.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React开发中"><a href="#React开发中" class="headerlink" title="React开发中"></a>React开发中</h1><p>(1) 对于调接口的时候，由于Java和PHP写的后台返回的数据格式不一样，在数据处理的时候，PHP返回的数据是对象的格式，键是index。</p><p>解决方案：对PHP返回的数据编写一个将对象转化为数组对象的格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">json2array</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> array = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> json)&#123;</span><br><span class="line">    array.push(json[item]);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> json2array;</span><br></pre></td></tr></table></figure><p>(2) 在调取接口的时候，出现跨域问题。</p><p>解决方案：<br>① 让后台开发人员开放权限。<br>② 通过proxy对象来解决这个跨域的问题。<br>③ 通过后台代理来解决。<br>④ 通过jsonp的形式来解决，常用的如天气预报的使用。<br>⑤ 通过CORS来解决。</p><h1 id="Vue开发中出现的Bug"><a href="#Vue开发中出现的Bug" class="headerlink" title="Vue开发中出现的Bug"></a>Vue开发中出现的Bug</h1><p>(1) 在Vue搭建环境中，在<a href="mailto:elementUI@2.13.0">elementUI@2.13.0</a>以后出现<code>ERROR in ./node_modules/element-ui/lib/theme-chalk/fonts/element-icons.ttf</code>和<code>ERROR in ./node_modules/element-ui/lib/theme-chalk/fonts/element-icons.woff</code>问题</p><p>解决方案：在模块的规则中加入以下规则，针对字体图库的规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/</span>,</span><br><span class="line">  loader: <span class="string">'file-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React开发中&quot;&gt;&lt;a href=&quot;#React开发中&quot; class=&quot;headerlink&quot; title=&quot;React开发中&quot;&gt;&lt;/a&gt;React开发中&lt;/h1&gt;&lt;p&gt;(1) 对于调接口的时候，由于Java和PHP写的后台返回的数据格式不一样，在数据处理的时候
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue复习和面试技巧</title>
    <link href="https://sitonlotus.github.io/2020/05/29/vue_review/"/>
    <id>https://sitonlotus.github.io/2020/05/29/vue_review/</id>
    <published>2020-05-29T06:26:16.000Z</published>
    <updated>2020-06-01T13:57:20.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue的原理和MVVM的解释"><a href="#vue的原理和MVVM的解释" class="headerlink" title="vue的原理和MVVM的解释"></a>vue的原理和MVVM的解释</h1><p>vue.js是用于构建交互式的web界面的库。</p><p>它MVVM数据绑定和一个可组合的组件系统，具有简单、灵活的API。从技术上讲，vue.js集中在MVVM模式上的视图模型层，并通过双向数据绑定链接视图和模型（react是\MVC模式，单向数据流）。</p><p>实际的dom操作和输出格式被抽象出来成<code>指令和过滤器</code>来源于angular。相比其他的MVVM框架，vue.js更容易上手（react生成虚拟dom，用js控制   vue的dom是抽象出来的已经封装好的，不用自己写虚拟dom）。</p><p>vue.js是一个用于创建web交互界面的库。它通过简单而灵活的API创建由数据驱动的UI组件。（react要自己写数据逻辑。vue全都封装好了，只要调用接口就行）</p><p><img src="/2020/05/29/vue_review/MVVM.png" alt="Vue的MVVM模型"></p><p>2、vue和react的区别（模式，书写格式，原理，类）<br>3、vue优点和使用的地方<br>4、vue搭建环境(生产环境和开发环境区别，齐页面应用) vue-cli _脚手架配置文件内容<br>5、vue实例属性和方法的含义(data 使用和原理，computed、 methods、 watch，在哪使用)<br>6、vue的生命周期<br>7、vue的指令原理，常用指令属性（总结所以循环、判断、特效、属性类事件类等）<br>8、vue的样式绑定(动态和静态区别)<br>9、keep-alive（动态组件）：那个版本加上，作用是什么，怎么用<br>10、条件指令使用，循环指令使用(数组、对象、判断)<br>11、v-show、v-if 原理和区别<br>12、事件绑定(绑定的指令,绑定原理、简写方式)<br>13、vue数据的双向绑定原理(重点解释v-model )<br>14、表单验证(实例必须完成+正则表达式)表单验证符<br>15、 全局组件、局部组件区别、注册方式<br>16、组件传值(子子、父子、子父、不相关的传值)<br>17、 创建组件的分发(分发原理、使用方式) |<br>18、vue动画使用类型(官方内容、常用动画效果)<br>19、路由(原理、类型、使用方式、路由的传值)<br>20、路由嵌套使用<br>21、导航守卫:原理应用场景、应用方式、导航守卫的类型。<br>22、后台交互:原生、axios、 vue-resource<br>23、Axios: 封装原理、包含的方法、跨域使用方式<br>24、vuex 原理、每一个模块作用，使用方式、使用场景<br>25、element-ul ( 后台管理)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue的原理和MVVM的解释&quot;&gt;&lt;a href=&quot;#vue的原理和MVVM的解释&quot; class=&quot;headerlink&quot; title=&quot;vue的原理和MVVM的解释&quot;&gt;&lt;/a&gt;vue的原理和MVVM的解释&lt;/h1&gt;&lt;p&gt;vue.js是用于构建交互式的web界面的库
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://sitonlotus.github.io/tags/Vue/"/>
    
      <category term="前端" scheme="https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端项目工程化构建</title>
    <link href="https://sitonlotus.github.io/2020/05/28/development_environment/"/>
    <id>https://sitonlotus.github.io/2020/05/28/development_environment/</id>
    <published>2020-05-28T05:21:47.000Z</published>
    <updated>2020-05-29T12:46:16.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React开发环境构建"><a href="#React开发环境构建" class="headerlink" title="React开发环境构建"></a>React开发环境构建</h1><h2 id="简单单页面多页面及环境构建"><a href="#简单单页面多页面及环境构建" class="headerlink" title="简单单页面多页面及环境构建"></a>简单单页面多页面及环境构建</h2><p>①    新建正确命名的项目文件夹；</p><p>②    进入文件夹下，打开CMD窗口或者的通过其他的开发软件打开Terminal窗口，初始化项目工程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init -y</span></span><br></pre></td></tr></table></figure><p>③    安装所需要的开发模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D webpack webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader css-loader file-loader style-loader json5-loader html-webpack-plugin webpack-dev-server react react-dom</span></span><br></pre></td></tr></table></figure><p>④    在项目根目录下新建.babelrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;@babel&#x2F;env&quot;,</span><br><span class="line">    &quot;@babel&#x2F;preset-react&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤    在package.json文件中的scripts下，新添加编译命令和测试命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack-dev-server --open&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack&quot;</span><br></pre></td></tr></table></figure><p>⑥    新建资源文件夹（用来存放开发网站所需要的资源）和编译后生成的文件夹（用来存放编译完成后的文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir src dist</span></span><br></pre></td></tr></table></figure><blockquote><p>在src文件下，主要存放是的编写组件、static文件等，但是为了项目更加规范的存放，一般会建立相关的文件，这个得看个人的编程习惯建立相应的文件夹进行管理放置。</p></blockquote><p>⑦    在项目根目录下新建webpack.config.js文件，编写配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index:<span class="string">'./src/index.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].min.js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">      use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.json5$/</span>,</span><br><span class="line">      loader: <span class="string">'json-loader'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="comment">//如果需要新建多个页面，就多实例化本函数</span></span><br><span class="line">        title: <span class="string">'主页'</span>,</span><br><span class="line">        filename: <span class="string">'./index.html'</span>,</span><br><span class="line">        chunks:[<span class="string">'index'</span>] <span class="comment">//一个页面所需要引入的js文件，用数组的心事添加</span></span><br><span class="line">      &#125;),     </span><br><span class="line">    ],</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">      port: <span class="number">3000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>⑧    编写js文件，本次以index.js为例，在src目录下新建该文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> imga <span class="keyword">from</span> <span class="string">'logo.jpg'</span>;<span class="comment">//引入图片，其中imga为路径名</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/index.css'</span>;<span class="comment">//引入css文件</span></span><br><span class="line"><span class="keyword">const</span> menu = <span class="built_in">require</span>(<span class="string">'./menu.json5'</span>);<span class="comment">//引入json5文件，同时json数据就为menu</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div&gt;hello&lt;img src=&#123;imga&#125;/&gt;&#123;<span class="built_in">console</span>.log(menu.map(<span class="function">(<span class="params">v,i</span>)=&gt;</span>(v)))&#125;&lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementsByTagName('body')[0]</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="搭建开发环境和生产环境并存的开发环境"><a href="#搭建开发环境和生产环境并存的开发环境" class="headerlink" title="搭建开发环境和生产环境并存的开发环境"></a>搭建开发环境和生产环境并存的开发环境</h2><p>①    新建正确命名的项目文件夹；</p><p>②    进入文件夹下，打开CMD窗口或者的通过其他的开发软件打开Terminal窗口，初始化项目工程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init -y</span></span><br></pre></td></tr></table></figure><p>③    安装所需要的开发模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D webpack webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader css-loader file-loader style-loader json5-loader html-webpack-plugin webpack-dev-server react react-dom webpack-merge</span></span><br></pre></td></tr></table></figure><p>④    在项目根目录下新建.babelrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;@babel&#x2F;env&quot;,</span><br><span class="line">    &quot;@babel&#x2F;preset-react&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤    在package.json文件中的scripts下，新添加编译命令和测试命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br></pre></td></tr></table></figure><p>⑥    新建资源文件夹（用来存放开发网站所需要的资源）和编译后生成的文件夹（用来存放编译完成后的文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir src dist</span></span><br></pre></td></tr></table></figure><p>⑦ 在项目根目录下新建webpack.common.js文件，编写配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].min.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">      use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif|mp4|svg)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options:  &#123;</span><br><span class="line">            name:<span class="string">'[name].[ext]'</span>, </span><br><span class="line">            outputPath:<span class="string">'img/'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.json5$/</span>,</span><br><span class="line">      loader: <span class="string">'json5-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $:<span class="string">'jquery'</span>,</span><br><span class="line">      jQuery:<span class="string">'jquery'</span>,</span><br><span class="line">      <span class="string">'window.jQuery'</span>:<span class="string">'jquery'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title:<span class="string">"首页"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>⑧ 在项目根目录下新建webpack.dev.js文件，编写开发时所需的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port:<span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>⑨ 在项目的根目录下新建webpack.prod.js文件，编写生产环境所需的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">  <span class="keyword">new</span> UglifyJSPlugin(&#123;</span><br><span class="line">    sourceMap: <span class="literal">true</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>⑩ 编写js文件，本次以index.js为例，在src目录下新建该文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> imga <span class="keyword">from</span> <span class="string">'logo.jpg'</span>;<span class="comment">//引入图片，其中imga为路径名</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/index.css'</span>;<span class="comment">//引入css文件</span></span><br><span class="line"><span class="keyword">const</span> menu = <span class="built_in">require</span>(<span class="string">'./menu.json5'</span>);<span class="comment">//引入json5文件，同时json数据就为menu</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div&gt;hello&lt;img src=&#123;imga&#125;/&gt;&#123;<span class="built_in">console</span>.log(menu.map(<span class="function">(<span class="params">v,i</span>)=&gt;</span>(v)))&#125;&lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementsByTagName('body')[0]</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><blockquote><p>对于在在React项目中引入antd库，这是一个不难的问题，但是由于antd的更新，总是会导致在各个版本中的按需加载的配置不一样，并且会报不同的错误，同时antd在版本之间的使用上有比较大的差异，因此这里不做详细的介绍及整理。</p></blockquote><h1 id="Vue开发环境构建"><a href="#Vue开发环境构建" class="headerlink" title="Vue开发环境构建"></a>Vue开发环境构建</h1><h2 id="简单单页面多页面及环境构建-1"><a href="#简单单页面多页面及环境构建-1" class="headerlink" title="简单单页面多页面及环境构建"></a>简单单页面多页面及环境构建</h2><p>①    新建项目文件夹，初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init -y</span></span><br></pre></td></tr></table></figure><p>②    下载相关包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D  @babel/core @babel/preset-env babel-loader css-loader file-loader jquery lodash style-loader url-loader vue vue-loader vue-template-compiler webpack webpack-cli webpack-dev-server</span></span><br></pre></td></tr></table></figure><p>③    在根目录下新建.babelrc文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④    增加package.json文件中script内容，后面作为打包测试的时候用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">&quot;start&quot;: &quot;webpack-dev-server --open&quot;</span><br></pre></td></tr></table></figure><p>⑤    在根目录下新建webpack.config.js，文件内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); </span><br><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index:<span class="string">'./src/index.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].min.js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">      use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options:  &#123;</span><br><span class="line">            name:<span class="string">'[name].[ext]'</span>, <span class="comment">//为文件配置自定义文件名模板</span></span><br><span class="line">            outputPath:<span class="string">'img/'</span><span class="comment">//为文件配置自定义 output 输出目录</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test:<span class="regexp">/\.(png|jpe?j|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">      loader:<span class="string">'url-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        limit:<span class="number">10240</span>,</span><br><span class="line">        name:<span class="string">'img/[name].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">      loader:<span class="string">'vue-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $:<span class="string">'jquery'</span>,</span><br><span class="line">      jQuery:<span class="string">'jquery'</span>,</span><br><span class="line">      <span class="string">'window.jQuery'</span>:<span class="string">'jquery'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="number">3000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    <span class="comment">//引入路径是不用写对应的后缀名</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    <span class="comment">//缩写扩展</span></span><br><span class="line">    alias:&#123;</span><br><span class="line">      <span class="comment">//正在使用的是vue的运行时版本，而此版本中的编译器时不可用的，我们需要把它切换成运行时 + 编译的版本</span></span><br><span class="line">      <span class="string">'vue$'</span>:<span class="string">'vue/dist/vue.esm.js'</span>,<span class="comment">// 'vue/dist/vue.common.js' for webpack 1</span></span><br><span class="line">      <span class="comment">//用@直接指引到src目录下，如：'./src/main'可以写成、'@/main'</span></span><br><span class="line">      <span class="string">'@'</span>: path.resolve(__dirname,<span class="string">'./src'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>⑥    在根目录下新建dist文件夹和src文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir dist src</span></span><br></pre></td></tr></table></figure><p>⑦    在dist文件夹下新建index.html文件，内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/index.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑧    在src文件夹下新建index.js文件，作为入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./test.vue'</span>;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#ex"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;Test&#125;,</span><br><span class="line">  template:<span class="string">'&lt;Test /&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>⑨    在src文件夹下新建test.vue文件，内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/p&gt;        </span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name:"Test",</span></span><br><span class="line"><span class="regexp">  data()&#123;</span></span><br><span class="line"><span class="regexp">    return&#123;msg:"hello world"&#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed:&#123;&#125;,</span></span><br><span class="line"><span class="regexp">  methods:&#123;&#125;,</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>⑩    最后测试是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><h2 id="搭建开发环境和生产环境并存的开发环境-1"><a href="#搭建开发环境和生产环境并存的开发环境-1" class="headerlink" title="搭建开发环境和生产环境并存的开发环境"></a>搭建开发环境和生产环境并存的开发环境</h2><p>①    新建项目文件夹，初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init -y</span></span><br></pre></td></tr></table></figure><p>②    下载相关包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D  @babel/core @babel/preset-env babel-loader css-loader file-loader jquery lodash style-loader url-loader vue vue-loader vue-template-compiler webpack webpack-cli webpack-dev-server webpack-merge</span></span><br></pre></td></tr></table></figure><p>③    在根目录下新建.babelrc文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④    增加package.json文件中script内容，后面作为打包测试的时候用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br></pre></td></tr></table></figure><p>⑤ 在项目根目录下新建公共配置文件webpack.common.js，其配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); </span><br><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index:<span class="string">'./src/index.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].min.js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">      use: <span class="string">'babel-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options:  &#123;</span><br><span class="line">            name:<span class="string">'[name].[ext]'</span>, <span class="comment">//为文件配置自定义文件名模板</span></span><br><span class="line">            outputPath:<span class="string">'img/'</span><span class="comment">//为文件配置自定义 output 输出目录</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test:<span class="regexp">/\.(png|jpe?j|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">      loader:<span class="string">'url-loader'</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        limit:<span class="number">10240</span>,</span><br><span class="line">        name:<span class="string">'img/[name].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      test:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">      loader:<span class="string">'vue-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $:<span class="string">'jquery'</span>,</span><br><span class="line">      jQuery:<span class="string">'jquery'</span>,</span><br><span class="line">      <span class="string">'window.jQuery'</span>:<span class="string">'jquery'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    <span class="comment">//引入路径是不用写对应的后缀名</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    <span class="comment">//缩写扩展</span></span><br><span class="line">    alias:&#123;</span><br><span class="line">      <span class="comment">//正在使用的是vue的运行时版本，而此版本中的编译器时不可用的，我们需要把它切换成运行时 + 编译的版本</span></span><br><span class="line">      <span class="string">'vue$'</span>:<span class="string">'vue/dist/vue.esm.js'</span>,<span class="comment">// 'vue/dist/vue.common.js' for webpack 1</span></span><br><span class="line">      <span class="comment">//用@直接指引到src目录下，如：'./src/main'可以写成、'@/main'</span></span><br><span class="line">      <span class="string">'@'</span>: path.resolve(__dirname,<span class="string">'./src'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>⑥ 在项目根目录下新建开发环境的配置文件webpack.dev.js，穷配置内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port:<span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>⑦ 在项目根目录下新建webpack.prod.js，其配置内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">  <span class="keyword">new</span> UglifyJSPlugin(&#123;</span><br><span class="line">    sourceMap: <span class="literal">true</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>⑧ 在dist文件夹下新建index.html文件，其内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/index.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑨ 在src文件夹下新建index.js的入口文件，其内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./Test.vue'</span>;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#ex"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;Test&#125;,</span><br><span class="line">  template:<span class="string">'&lt;Test /&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>⑩ 在src文件夹下新建Test.vue文件，其测试内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;        </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&quot;Test&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;msg:&quot;hello world&quot;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;&#125;,</span><br><span class="line">  methods:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>⑪ 测试是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><blockquote><p>最后，可以参考一下React和Vue环境之间的差异，React中使用了<code>html-webpack-plugin</code>包，可以自动生成HTML文件，在渲染编译的时候可以自己不用手动将JS文件引入到HTML文件或自己新建HTML文件，但是Vue不同没使用到该包，在React中也可以根据个人的喜好或者是开发要求来选择。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React开发环境构建&quot;&gt;&lt;a href=&quot;#React开发环境构建&quot; class=&quot;headerlink&quot; title=&quot;React开发环境构建&quot;&gt;&lt;/a&gt;React开发环境构建&lt;/h1&gt;&lt;h2 id=&quot;简单单页面多页面及环境构建&quot;&gt;&lt;a href=&quot;#简单单页
      
    
    </summary>
    
    
    
      <category term="WEB" scheme="https://sitonlotus.github.io/tags/WEB/"/>
    
      <category term="React" scheme="https://sitonlotus.github.io/tags/React/"/>
    
      <category term="Vue" scheme="https://sitonlotus.github.io/tags/Vue/"/>
    
      <category term="开发环境" scheme="https://sitonlotus.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>javascript知识点整理和面试题详解</title>
    <link href="https://sitonlotus.github.io/2020/05/27/javascript/"/>
    <id>https://sitonlotus.github.io/2020/05/27/javascript/</id>
    <published>2020-05-27T01:36:45.000Z</published>
    <updated>2020-05-28T03:04:36.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS初级"><a href="#JS初级" class="headerlink" title="JS初级"></a>JS初级</h1><hr><h1 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h1><hr><h1 id="JS面试题详解"><a href="#JS面试题详解" class="headerlink" title="JS面试题详解"></a>JS面试题详解</h1><hr><p>1) 实现一个简单的EventEmitter，要求实现on(绑定事件)，off(解绑事件)和emit(触发事件)<br>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventEmitter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handlers=&#123;&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.prototype);</span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.on=<span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.handlers[type])&#123;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type]=[];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.handlers[type].push(fn);</span><br><span class="line">  <span class="comment">// console.log(this)</span></span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.off = <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.handlers[type]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> <span class="keyword">this</span>.handlers[type];</span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.emit = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.handlers[type]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.handlers[type].forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> h=<span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">h.on(<span class="string">"f1"</span>,f1);</span><br><span class="line">h.emit(<span class="string">"f1"</span>,f1)</span><br><span class="line">h.off(<span class="string">"f1"</span>,f1)</span><br></pre></td></tr></table></figure><p>方法二：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS初级&quot;&gt;&lt;a href=&quot;#JS初级&quot; class=&quot;headerlink&quot; title=&quot;JS初级&quot;&gt;&lt;/a&gt;JS初级&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;JS高级&quot;&gt;&lt;a href=&quot;#JS高级&quot; class=&quot;headerlink&quot; title=&quot;JS高级
      
    
    </summary>
    
    
    
      <category term="知识点" scheme="https://sitonlotus.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="面试" scheme="https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="ES5" scheme="https://sitonlotus.github.io/tags/ES5/"/>
    
      <category term="JavaScript" scheme="https://sitonlotus.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>es6知识点整理及精选面试题详解</title>
    <link href="https://sitonlotus.github.io/2020/05/27/es6/"/>
    <id>https://sitonlotus.github.io/2020/05/27/es6/</id>
    <published>2020-05-27T00:35:31.000Z</published>
    <updated>2020-05-28T03:07:13.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识点整理"><a href="#知识点整理" class="headerlink" title="知识点整理"></a>知识点整理</h1><hr><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><hr><h2 id="关于Promise的使用"><a href="#关于Promise的使用" class="headerlink" title="关于Promise的使用"></a>关于Promise的使用</h2><p>1) 用Promise实现延迟函数delay(面试题)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;,time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"resolved"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;知识点整理&quot;&gt;&lt;a href=&quot;#知识点整理&quot; class=&quot;headerlink&quot; title=&quot;知识点整理&quot;&gt;&lt;/a&gt;知识点整理&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://sitonlotus.github.io/tags/ES6/"/>
    
      <category term="前端" scheme="https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="知识点" scheme="https://sitonlotus.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="面试" scheme="https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>div水平垂直居中.md</title>
    <link href="https://sitonlotus.github.io/2020/05/12/making_div_centering/"/>
    <id>https://sitonlotus.github.io/2020/05/12/making_div_centering/</id>
    <published>2020-05-12T02:24:10.000Z</published>
    <updated>2020-05-28T13:05:05.843Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是写关于在前端工作中，如何将一个div水平垂直居中。</p><p>这里有很多方法，下面介绍好几种常见的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要是写关于在前端工作中，如何将一个div水平垂直居中。&lt;/p&gt;
&lt;p&gt;这里有很多方法，下面介绍好几种常见的方法&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo写博客并发布</title>
    <link href="https://sitonlotus.github.io/2020/05/12/making_blog_by_hexo/"/>
    <id>https://sitonlotus.github.io/2020/05/12/making_blog_by_hexo/</id>
    <published>2020-05-12T00:59:51.505Z</published>
    <updated>2020-06-01T14:01:54.591Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo搭建博客，唯一一个方便就是将自己的博客放在GitHub仓库里面，只需要访问即可，这可以省去购买服务器和域名的钱，同时也省去了维护的成本。</p><h2 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>对于前期的准备，就是需要安装nodejs、git，对于编辑器的话，自己按照自己的喜好选择即可。</p><p>nodejs主要使用的是其npm管理工具，主要是安装一些依赖包，而git的话使用它推送到远程仓库。这里就不介绍这两的安装过程，对于小白的话，百度一下教程随处可见，这里就不花过多的语言来描述。</p><h3 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="新建博客系统同时初始化"><a href="#新建博客系统同时初始化" class="headerlink" title="新建博客系统同时初始化"></a>新建博客系统同时初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init <span class="string">"blog-name"</span></span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir <span class="string">"blog-name"</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"blog-name"</span></span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>这里需要下载一些文件，以及对主题的拉取，事件会稍微久点，等待拉取完后，进行一下操作，测试博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>注意：<code>hexo clean</code>命令是将项目的缓存进行清理，<code>hexo g</code>是生成博客的静态文件，<code>hexo s</code>是在本地开启预览的服务器。</p><h3 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h3><p>首先在github仓库中，新建一个仓库，其仓库名一定是<code>&quot;GitHub账户名&quot;.github.io</code>，并设置开放的仓库。</p><p>配置的话，在根目录下_config.yml文件中，在最后的<code>deploy</code>中，需要配置一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repository: &#39;仓库名&#39;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>如果你配置了私钥，此时就不需要输入GitHub账号和密码，反之则会自己输入。</p><h2 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h2><h3 id="修改更换主题"><a href="#修改更换主题" class="headerlink" title="修改更换主题"></a>修改更换主题</h3><p>在</p><h3 id="设置关于、标签、分类、归档、时间线"><a href="#设置关于、标签、分类、归档、时间线" class="headerlink" title="设置关于、标签、分类、归档、时间线"></a>设置关于、标签、分类、归档、时间线</h3><h3 id="写文章发布"><a href="#写文章发布" class="headerlink" title="写文章发布"></a>写文章发布</h3><h3 id="在博客中插入图片"><a href="#在博客中插入图片" class="headerlink" title="在博客中插入图片"></a>在博客中插入图片</h3><p>① <strong>设置站点配置</strong><code>_config.yml</code>:将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code><br>② <strong>安装插件</strong>:<code>npm install https://github.com/CodeFalling/hexo-asset-image --D</code><br>③ <strong>运行</strong><code>hexo n &quot;XXXXXX&quot;</code>,生成XXXXX.md博文时就会在<code>/source/_posts</code>目录下生成<code>XXXXXX</code>的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。<br>④ <strong>添加图片</strong>:在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用hexo搭建博客，唯一一个方便就是将自己的博客放在GitHub仓库里面，只需要访问即可，这可以省去购买服务器和域名的钱，同时也省去了维护的成本。&lt;/p&gt;
&lt;h2 id=&quot;使用hexo搭建博客&quot;&gt;&lt;a href=&quot;#使用hexo搭建博客&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="博客" scheme="https://sitonlotus.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
