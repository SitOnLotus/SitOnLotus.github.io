<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>下弯的松枝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sitonlotus.github.io/"/>
  <updated>2020-05-27T01:40:04.935Z</updated>
  <id>https://sitonlotus.github.io/</id>
  
  <author>
    <name>刘作莲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript知识点整理和面试题详解</title>
    <link href="https://sitonlotus.github.io/2020/05/27/javascript/"/>
    <id>https://sitonlotus.github.io/2020/05/27/javascript/</id>
    <published>2020-05-27T01:36:45.000Z</published>
    <updated>2020-05-27T01:40:04.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS初级"><a href="#JS初级" class="headerlink" title="JS初级"></a>JS初级</h1><h1 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h1><h1 id="JS面试题详解"><a href="#JS面试题详解" class="headerlink" title="JS面试题详解"></a>JS面试题详解</h1><p>1) 实现一个简单的EventEmitter，要求实现on(绑定事件)，off(解绑事件)和emit(触发事件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventEmitter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handlers=&#123;&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.prototype);</span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.on=<span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.handlers[type])&#123;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type]=[];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.handlers[type].push(fn);</span><br><span class="line">  <span class="comment">// console.log(this)</span></span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.off = <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.handlers[type]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> <span class="keyword">this</span>.handlers[type];</span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.emit = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.handlers[type]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.handlers[type].forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> h=<span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">h.on(<span class="string">"f1"</span>,f1);</span><br><span class="line">h.emit(<span class="string">"f1"</span>,f1)</span><br><span class="line">h.off(<span class="string">"f1"</span>,f1)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS初级&quot;&gt;&lt;a href=&quot;#JS初级&quot; class=&quot;headerlink&quot; title=&quot;JS初级&quot;&gt;&lt;/a&gt;JS初级&lt;/h1&gt;&lt;h1 id=&quot;JS高级&quot;&gt;&lt;a href=&quot;#JS高级&quot; class=&quot;headerlink&quot; title=&quot;JS高级&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>es6知识点整理及精选面试题详解</title>
    <link href="https://sitonlotus.github.io/2020/05/27/es6/"/>
    <id>https://sitonlotus.github.io/2020/05/27/es6/</id>
    <published>2020-05-27T00:35:31.000Z</published>
    <updated>2020-05-27T01:38:45.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识点整理"><a href="#知识点整理" class="headerlink" title="知识点整理"></a>知识点整理</h1><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="关于Promise的使用"><a href="#关于Promise的使用" class="headerlink" title="关于Promise的使用"></a>关于Promise的使用</h2><p>1) 用Promise实现延迟函数delay(2020年阿里伯乐面试)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;,time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"resolved"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;知识点整理&quot;&gt;&lt;a href=&quot;#知识点整理&quot; class=&quot;headerlink&quot; title=&quot;知识点整理&quot;&gt;&lt;/a&gt;知识点整理&lt;/h1&gt;&lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="es6" scheme="https://sitonlotus.github.io/tags/es6/"/>
    
      <category term="前端" scheme="https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>div水平垂直居中.md</title>
    <link href="https://sitonlotus.github.io/2020/05/12/making_div_centering/"/>
    <id>https://sitonlotus.github.io/2020/05/12/making_div_centering/</id>
    <published>2020-05-12T02:24:10.000Z</published>
    <updated>2020-05-13T08:52:41.098Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是写关于在前端工作中，如何将一个div水平垂直居中。</p><p>这里有很多方法，下面介绍好几种常见的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要是写关于在前端工作中，如何将一个div水平垂直居中。&lt;/p&gt;
&lt;p&gt;这里有很多方法，下面介绍好几种常见的方法&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试题" scheme="https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo写博客并发布</title>
    <link href="https://sitonlotus.github.io/2020/05/12/making_blog_by_hexo/"/>
    <id>https://sitonlotus.github.io/2020/05/12/making_blog_by_hexo/</id>
    <published>2020-05-12T00:59:51.505Z</published>
    <updated>2020-05-13T08:52:30.464Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo搭建博客，唯一一个方便就是将自己的博客放在GitHub仓库里面，只需要访问即可，这可以省去购买服务器和域名的钱，同时也省去了维护的成本。</p><h2 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>对于前期的准备，就是需要安装nodejs、git，对于编辑器的话，自己按照自己的喜好选择即可。</p><p>nodejs主要使用的是其npm管理工具，主要是安装一些依赖包，而git的话使用它推送到远程仓库。这里就不介绍这两的安装过程，对于小白的话，百度一下教程随处可见，这里就不花过多的语言来描述。</p><h3 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="新建博客系统同时初始化"><a href="#新建博客系统同时初始化" class="headerlink" title="新建博客系统同时初始化"></a>新建博客系统同时初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init <span class="string">"blog-name"</span></span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir <span class="string">"blog-name"</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"blog-name"</span></span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>这里需要下载一些文件，以及对主题的拉取，事件会稍微久点，等待拉取完后，进行一下操作，测试博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>注意：<code>hexo clean</code>命令是将项目的缓存进行清理，<code>hexo g</code>是生成博客的静态文件，<code>hexo s</code>是在本地开启预览的服务器。</p><h3 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h3><p>首先在github仓库中，新建一个仓库，其仓库名一定是<code>&quot;GitHub账户名&quot;.github.io</code>，并设置开放的仓库。</p><p>配置的话，在根目录下_config.yml文件中，在最后的<code>deploy</code>中，需要配置一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repository: &#39;仓库名&#39;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>如果你配置了私钥，此时就不需要输入GitHub账号和密码，反之则会自己输入。</p><h2 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h2><h3 id="修改更换主题"><a href="#修改更换主题" class="headerlink" title="修改更换主题"></a>修改更换主题</h3><p>在</p><h3 id="设置关于、标签、分类、归档、时间线"><a href="#设置关于、标签、分类、归档、时间线" class="headerlink" title="设置关于、标签、分类、归档、时间线"></a>设置关于、标签、分类、归档、时间线</h3><h3 id="写文章发布"><a href="#写文章发布" class="headerlink" title="写文章发布"></a>写文章发布</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用hexo搭建博客，唯一一个方便就是将自己的博客放在GitHub仓库里面，只需要访问即可，这可以省去购买服务器和域名的钱，同时也省去了维护的成本。&lt;/p&gt;
&lt;h2 id=&quot;使用hexo搭建博客&quot;&gt;&lt;a href=&quot;#使用hexo搭建博客&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="博客" scheme="https://sitonlotus.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
