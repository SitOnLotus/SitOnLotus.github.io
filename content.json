{"meta":{"title":"下弯的松枝","subtitle":"","description":"","author":"刘作莲","url":"https://sitonlotus.github.io","root":"/"},"pages":[{"title":"关于我们","date":"2020-05-12T05:26:34.000Z","updated":"2020-05-12T05:28:46.412Z","comments":true,"path":"about/index.html","permalink":"https://sitonlotus.github.io/about/index.html","excerpt":"","text":""},{"title":"归档","date":"2020-05-12T05:30:12.000Z","updated":"2020-05-12T05:30:22.302Z","comments":true,"path":"archives/index.html","permalink":"https://sitonlotus.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-12T05:28:03.000Z","updated":"2020-05-12T06:00:11.211Z","comments":true,"path":"categories/index.html","permalink":"https://sitonlotus.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-12T06:06:12.288Z","updated":"2020-05-12T05:55:51.565Z","comments":true,"path":"links/index.html","permalink":"https://sitonlotus.github.io/links/index.html","excerpt":"","text":""},{"title":"repository","date":"2020-05-12T05:49:09.000Z","updated":"2020-05-12T05:49:09.833Z","comments":true,"path":"repository/index.html","permalink":"https://sitonlotus.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-12T13:01:36.074Z","updated":"2020-05-12T13:01:36.074Z","comments":true,"path":"tags/index.html","permalink":"https://sitonlotus.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue复习和面试技巧","slug":"vue_review","date":"2020-05-29T06:26:16.000Z","updated":"2020-05-29T07:05:43.252Z","comments":true,"path":"2020/05/29/vue_review/","link":"","permalink":"https://sitonlotus.github.io/2020/05/29/vue_review/","excerpt":"","text":"vue的原理和MVVM的解释vue.js是用于构建交互式的web界面的库。 它MVVM数据绑定和一个可组合的组件系统，具有简单、灵活的API。从技术上讲，vue.js集中在MVVM模式上的视图模型层，并通过双向数据绑定链接视图和模型（react是\\MVC模式，单向数据流）。 实际的dom操作和输出格式被抽象出来成指令和过滤器来源于angular。相比其他的MVVM框架，vue.js更容易上手（react生成虚拟dom，用js控制 vue的dom是抽象出来的已经封装好的，不用自己写虚拟dom）。 vue.js是一个用于创建web交互界面的库。它通过简单而灵活的API创建由数据驱动的UI组件。（react要自己写数据逻辑。vue全都封装好了，只要调用接口就行） 1、2、vue和react的区别（模式，书写格式，原理，类）3、vue优点和使用的地方4、vue搭建环境(生产环境和开发环境区别，齐页面应用) vue-cli _脚手架配置文件内容5、vue实例属性和方法的含义(data 使用和原理，computed、 methods、 watch，在哪使用)6、vue的生命周期7、vue的指令原理，常用指令属性（总结所以循环、判断、特效、属性类事件类等）8、vue的样式绑定(动态和静态区别)9、keep-alive（动态组件）：那个版本加上，作用是什么，怎么用10、条件指令使用，循环指令使用(数组、对象、判断)11、v-show、v-if 原理和区别12、事件绑定(绑定的指令,绑定原理、简写方式)13、vue数据的双向绑定原理(重点解释v-model )14、表单验证(实例必须完成+正则表达式)表单验证符15、 全局组件、局部组件区别、注册方式16、组件传值(子子、父子、子父、不相关的传值)17、 创建组件的分发(分发原理、使用方式) |18、vue动画使用类型(官方内容、常用动画效果)19、路由(原理、类型、使用方式、路由的传值)20、路由嵌套使用21、导航守卫:原理应用场景、应用方式、导航守卫的类型。22、后台交互:原生、axios、 vue-resource23、Axios: 封装原理、包含的方法、跨域使用方式24、vuex 原理、每一个模块作用，使用方式、使用场景25、element-ul ( 后台管理)","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://sitonlotus.github.io/tags/Vue/"},{"name":"前端","slug":"前端","permalink":"https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"面试","slug":"面试","permalink":"https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"前端项目工程化构建","slug":"development_environment","date":"2020-05-28T05:21:47.000Z","updated":"2020-05-28T13:12:23.516Z","comments":true,"path":"2020/05/28/development_environment/","link":"","permalink":"https://sitonlotus.github.io/2020/05/28/development_environment/","excerpt":"","text":"React开发环境构建简单单页面多页面及环境构建① 新建正确命名的项目文件夹； ② 进入文件夹下，打开CMD窗口或者的通过其他的开发软件打开Terminal窗口，初始化项目工程 1$ npm init -y ③ 安装所需要的开发模块 1$ npm i -D webpack webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader css-loader file-loader style-loader json5-loader html-webpack-plugin webpack-dev-server react react-dom ④ 在项目根目录下新建.babelrc文件 1234567&#123; &quot;presets&quot;: [ &quot;@babel&#x2F;env&quot;, &quot;@babel&#x2F;preset-react&quot; ], &quot;plugins&quot;: []&#125; ⑤ 在package.json文件中的scripts下，新添加编译命令和测试命令 12&quot;start&quot;: &quot;webpack-dev-server --open&quot;,&quot;build&quot;: &quot;webpack&quot; ⑥ 新建资源文件夹（用来存放开发网站所需要的资源）和编译后生成的文件夹（用来存放编译完成后的文件） 1$ mkdir src dist 在src文件下，主要存放是的编写组件、static文件等，但是为了项目更加规范的存放，一般会建立相关的文件，这个得看个人的编程习惯建立相应的文件夹进行管理放置。 ⑦ 在项目根目录下新建webpack.config.js文件，编写配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445const HtmlWebpackPlugin = require('html-webpack-plugin');const path = require('path');const config = &#123; entry: &#123; index:'./src/index.js', &#125;, output: &#123; filename: 'js/[name].min.js', path: __dirname + '/dist' &#125;, module: &#123; rules: [&#123; test: /\\.(js|jsx)$/, use: 'babel-loader', exclude: /node_modules/ &#125;,&#123; test: /\\.css$/, use: [ 'style-loader', 'css-loader' ] &#125;,&#123; test: /\\.(png|jpg|gif)$/, use: [ &#123; loader: 'file-loader', options: &#123;&#125; &#125; ] &#125;,&#123; test: /\\.json5$/, loader: 'json-loader' &#125;] &#125;, plugins: [ new HtmlWebpackPlugin(&#123;//如果需要新建多个页面，就多实例化本函数 title: '主页', filename: './index.html', chunks:['index'] //一个页面所需要引入的js文件，用数组的心事添加 &#125;), ], devServer: &#123; contentBase: './dist', port: 3000 &#125;&#125;;module.exports = config; ⑧ 编写js文件，本次以index.js为例，在src目录下新建该文件 12345678910import React from 'react';import ReactDOM from 'react-dom';import imga from 'logo.jpg';//引入图片，其中imga为路径名import './css/index.css';//引入css文件const menu = require('./menu.json5');//引入json5文件，同时json数据就为menuReactDOM.render( &lt;div&gt;hello&lt;img src=&#123;imga&#125;/&gt;&#123;console.log(menu.map((v,i)=&gt;(v)))&#125;&lt;/div&gt;, document.getElementsByTagName('body')[0]) 搭建开发环境和生产环境并存的开发环境① 新建正确命名的项目文件夹； ② 进入文件夹下，打开CMD窗口或者的通过其他的开发软件打开Terminal窗口，初始化项目工程 1$ npm init -y ③ 安装所需要的开发模块 1$ npm i -D webpack webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader css-loader file-loader style-loader json5-loader html-webpack-plugin webpack-dev-server react react-dom webpack-merge ④ 在项目根目录下新建.babelrc文件 1234567&#123; &quot;presets&quot;: [ &quot;@babel&#x2F;env&quot;, &quot;@babel&#x2F;preset-react&quot; ], &quot;plugins&quot;: []&#125; ⑤ 在package.json文件中的scripts下，新添加编译命令和测试命令 12&quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,&quot;build&quot;: &quot;webpack --config webpack.prod.js&quot; ⑥ 新建资源文件夹（用来存放开发网站所需要的资源）和编译后生成的文件夹（用来存放编译完成后的文件） 1$ mkdir src dist ⑦ 在项目根目录下新建webpack.common.js文件，编写配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647const webpack=require('webpack');const path = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123; entry: &#123; index: './src/index.js' &#125;, output: &#123; filename: 'js/[name].min.js', path: path.resolve(__dirname, './dist') &#125;, module: &#123; rules: [&#123; test: /\\.(js|jsx)$/, use: 'babel-loader', exclude: /node_modules/ &#125;,&#123; test: /\\.css$/, use: [ 'style-loader', 'css-loader' ] &#125;,&#123; test: /\\.(png|jpg|gif|mp4|svg)$/, use: [ &#123; loader: 'file-loader', options: &#123; name:'[name].[ext]', outputPath:'img/' &#125; &#125; ] &#125;,&#123; test: /\\.json5$/, loader: 'json5-loader' &#125;] &#125;, plugins: [ new webpack.ProvidePlugin(&#123; $:'jquery', jQuery:'jquery', 'window.jQuery':'jquery' &#125;), new HtmlWebpackPlugin(&#123; title:\"首页\" &#125;) ],&#125;; ⑧ 在项目根目录下新建webpack.dev.js文件，编写开发时所需的配置 1234567891011const merge = require('webpack-merge');const common = require('./webpack.common.js');module.exports = merge(common, &#123; mode: 'development', devtool: 'inline-source-map', devServer: &#123; contentBase: './dist', port:3000 &#125;&#125;); ⑨ 在项目的根目录下新建webpack.prod.js文件，编写生产环境所需的配置 123456789101112131415const webpack=require('webpack');const merge = require('webpack-merge');const UglifyJSPlugin = require('uglifyjs-webpack-plugin');const common = require('./webpack.common.js');module.exports = merge(common, &#123; mode: 'production', plugins: [ new UglifyJSPlugin(&#123; sourceMap: true &#125;), new webpack.DefinePlugin(&#123; 'process.env.NODE_ENV': JSON.stringify('production') &#125;)]&#125;); ⑩ 编写js文件，本次以index.js为例，在src目录下新建该文件 12345678910import React from 'react';import ReactDOM from 'react-dom';import imga from 'logo.jpg';//引入图片，其中imga为路径名import './css/index.css';//引入css文件const menu = require('./menu.json5');//引入json5文件，同时json数据就为menuReactDOM.render( &lt;div&gt;hello&lt;img src=&#123;imga&#125;/&gt;&#123;console.log(menu.map((v,i)=&gt;(v)))&#125;&lt;/div&gt;, document.getElementsByTagName('body')[0]) 对于在在React项目中引入antd库，这是一个不难的问题，但是由于antd的更新，总是会导致在各个版本中的按需加载的配置不一样，并且会报不同的错误，同时antd在版本之间的使用上有比较大的差异，因此这里不做详细的介绍及整理。 Vue开发环境构建简单单页面多页面及环境构建① 新建项目文件夹，初始化项目 1$ npm init -y ② 下载相关包 1$ npm i -D @babel/core @babel/preset-env babel-loader css-loader file-loader jquery lodash style-loader url-loader vue vue-loader vue-template-compiler webpack webpack-cli webpack-dev-server ③ 在根目录下新建.babelrc文件，内容如下 123&#123; &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]&#125; ④ 增加package.json文件中script内容，后面作为打包测试的时候用的 12&quot;build&quot;: &quot;webpack&quot;,&quot;start&quot;: &quot;webpack-dev-server --open&quot; ⑤ 在根目录下新建webpack.config.js，文件内容如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768const path = require('path'); const webpack=require('webpack');const VueLoaderPlugin = require('vue-loader/lib/plugin');const config = &#123; entry: &#123; index:'./src/index.js', &#125;, output: &#123; filename: 'js/[name].min.js', path: __dirname + '/dist' &#125;, module: &#123; rules: [&#123; test: /\\.(js|jsx)$/, use: 'babel-loader', exclude: /node_modules/ &#125;,&#123; test: /\\.css$/, use: [ 'style-loader', 'css-loader' ] &#125;,&#123; test: /\\.(png|jpg|gif)$/, use: [ &#123; loader: 'file-loader', options: &#123; name:'[name].[ext]', //为文件配置自定义文件名模板 outputPath:'img/'//为文件配置自定义 output 输出目录 &#125; &#125; ] &#125;,&#123; test:/\\.(png|jpe?j|gif|svg)(\\?.*)?$/, loader:'url-loader', options:&#123; limit:10240, name:'img/[name].[ext]' &#125; &#125;,&#123; test:/\\.vue$/, loader:'vue-loader' &#125;] &#125;, plugins: [ new VueLoaderPlugin(), new webpack.ProvidePlugin(&#123; $:'jquery', jQuery:'jquery', 'window.jQuery':'jquery' &#125;) ], devServer: &#123; contentBase: './dist', port: 3000 &#125;, resolve:&#123; //引入路径是不用写对应的后缀名 extensions: ['.js', '.vue', '.json'], //缩写扩展 alias:&#123; //正在使用的是vue的运行时版本，而此版本中的编译器时不可用的，我们需要把它切换成运行时 + 编译的版本 'vue$':'vue/dist/vue.esm.js',// 'vue/dist/vue.common.js' for webpack 1 //用@直接指引到src目录下，如：'./src/main'可以写成、'@/main' '@': path.resolve(__dirname,'./src'), &#125; &#125;&#125;;module.exports = config; ⑥ 在根目录下新建dist文件夹和src文件夹 1$ mkdir dist src ⑦ 在dist文件夹下新建index.html文件，内容如下 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;vue测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"ex\"&gt;&lt;/div&gt; &lt;script src=\"./js/index.min.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; ⑧ 在src文件夹下新建index.js文件，作为入口文件 123456789import Vue from 'vue';import Test from './test.vue';new Vue(&#123; el:\"#ex\", data:&#123; &#125;, components:&#123;Test&#125;, template:'&lt;Test /&gt;'&#125;) ⑨ 在src文件夹下新建test.vue文件，内容如下 123456789101112131415&lt;template&gt; &lt;div&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name:\"Test\", data()&#123; return&#123;msg:\"hello world\"&#125; &#125;, computed:&#123;&#125;, methods:&#123;&#125;,&#125;&lt;/script&gt; ⑩ 最后测试是否成功 1$ npm start 搭建开发环境和生产环境并存的开发环境① 新建项目文件夹，初始化项目 1$ npm init -y ② 下载相关包 1$ npm i -D @babel/core @babel/preset-env babel-loader css-loader file-loader jquery lodash style-loader url-loader vue vue-loader vue-template-compiler webpack webpack-cli webpack-dev-server webpack-merge ③ 在根目录下新建.babelrc文件，内容如下 123&#123; &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]&#125; ④ 增加package.json文件中script内容，后面作为打包测试的时候用的 12&quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,&quot;build&quot;: &quot;webpack --config webpack.prod.js&quot; ⑤ 在项目根目录下新建公共配置文件webpack.common.js，其配置如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364const path = require('path'); const webpack=require('webpack');const VueLoaderPlugin = require('vue-loader/lib/plugin');const config = &#123; entry: &#123; index:'./src/index.js', &#125;, output: &#123; filename: 'js/[name].min.js', path: __dirname + '/dist' &#125;, module: &#123; rules: [&#123; test: /\\.(js|jsx)$/, use: 'babel-loader', exclude: /node_modules/ &#125;,&#123; test: /\\.css$/, use: [ 'style-loader', 'css-loader' ] &#125;,&#123; test: /\\.(png|jpg|gif)$/, use: [ &#123; loader: 'file-loader', options: &#123; name:'[name].[ext]', //为文件配置自定义文件名模板 outputPath:'img/'//为文件配置自定义 output 输出目录 &#125; &#125; ] &#125;,&#123; test:/\\.(png|jpe?j|gif|svg)(\\?.*)?$/, loader:'url-loader', options:&#123; limit:10240, name:'img/[name].[ext]' &#125; &#125;,&#123; test:/\\.vue$/, loader:'vue-loader' &#125;] &#125;, plugins: [ new VueLoaderPlugin(), new webpack.ProvidePlugin(&#123; $:'jquery', jQuery:'jquery', 'window.jQuery':'jquery' &#125;) ], resolve:&#123; //引入路径是不用写对应的后缀名 extensions: ['.js', '.vue', '.json'], //缩写扩展 alias:&#123; //正在使用的是vue的运行时版本，而此版本中的编译器时不可用的，我们需要把它切换成运行时 + 编译的版本 'vue$':'vue/dist/vue.esm.js',// 'vue/dist/vue.common.js' for webpack 1 //用@直接指引到src目录下，如：'./src/main'可以写成、'@/main' '@': path.resolve(__dirname,'./src'), &#125; &#125;&#125;;module.exports = config; ⑥ 在项目根目录下新建开发环境的配置文件webpack.dev.js，穷配置内容如下： 1234567891011const merge = require('webpack-merge');const common = require('./webpack.common.js');module.exports = merge(common, &#123; mode: 'development', devtool: 'inline-source-map', devServer: &#123; contentBase: './dist', port:3000 &#125;&#125;); ⑦ 在项目根目录下新建webpack.prod.js，其配置内容如下： 123456789101112131415const webpack=require('webpack');const merge = require('webpack-merge');const UglifyJSPlugin = require('uglifyjs-webpack-plugin');const common = require('./webpack.common.js');module.exports = merge(common, &#123; mode: 'production', plugins: [ new UglifyJSPlugin(&#123; sourceMap: true &#125;), new webpack.DefinePlugin(&#123; 'process.env.NODE_ENV': JSON.stringify('production') &#125;)]&#125;); ⑧ 在dist文件夹下新建index.html文件，其内容如下： 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;vue测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"ex\"&gt;&lt;/div&gt; &lt;script src=\"./js/index.min.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; ⑨ 在src文件夹下新建index.js的入口文件，其内容如下： 123456789import Vue from 'vue';import Test from './Test.vue';new Vue(&#123; el:\"#ex\", data:&#123; &#125;, components:&#123;Test&#125;, template:'&lt;Test /&gt;'&#125;) ⑩ 在src文件夹下新建Test.vue文件，其测试内容如下： 123456789101112131415&lt;template&gt; &lt;div&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name:&quot;Test&quot;, data()&#123; return&#123;msg:&quot;hello world&quot;&#125; &#125;, computed:&#123;&#125;, methods:&#123;&#125;,&#125;&lt;&#x2F;script&gt; ⑪ 测试是否成功 1$ npm start 最后，可以参考一下React和Vue环境之间的差异，React中使用了html-webpack-plugin包，可以自动生成HTML文件，在渲染编译的时候可以自己不用手动将JS文件引入到HTML文件或自己新建HTML文件，但是Vue不同没使用到该包，在React中也可以根据个人的喜好或者是开发要求来选择。","categories":[],"tags":[{"name":"WEB","slug":"WEB","permalink":"https://sitonlotus.github.io/tags/WEB/"},{"name":"React","slug":"React","permalink":"https://sitonlotus.github.io/tags/React/"},{"name":"Vue","slug":"Vue","permalink":"https://sitonlotus.github.io/tags/Vue/"},{"name":"开发环境","slug":"开发环境","permalink":"https://sitonlotus.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"}]},{"title":"javascript知识点整理和面试题详解","slug":"javascript","date":"2020-05-27T01:36:45.000Z","updated":"2020-05-28T03:04:36.579Z","comments":true,"path":"2020/05/27/javascript/","link":"","permalink":"https://sitonlotus.github.io/2020/05/27/javascript/","excerpt":"","text":"JS初级 JS高级 JS面试题详解 1) 实现一个简单的EventEmitter，要求实现on(绑定事件)，off(解绑事件)和emit(触发事件)方法一： 12345678910111213141516171819202122232425262728293031323334function EventEmitter()&#123; this.handlers=&#123;&#125;; console.log(this.prototype);&#125;EventEmitter.prototype.on=function(type,fn)&#123; if(!this.handlers[type])&#123; this.handlers[type]=[]; &#125; this.handlers[type].push(fn); // console.log(this)&#125;EventEmitter.prototype.off = function(type, fn) &#123; if (!this.handlers[type]) &#123; return; &#125; if (!fn) &#123; this.handlers[type] = undefined; return; &#125; delete this.handlers[type];&#125;EventEmitter.prototype.emit = function(type) &#123; if (!this.handlers[type]) &#123; return; &#125; this.handlers[type].forEach(fn =&gt; fn());&#125;var h=new EventEmitter();function f1()&#123; console.log(\"hello\")&#125;h.on(\"f1\",f1);h.emit(\"f1\",f1)h.off(\"f1\",f1) 方法二：","categories":[],"tags":[{"name":"知识点","slug":"知识点","permalink":"https://sitonlotus.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"name":"面试","slug":"面试","permalink":"https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"ES5","slug":"ES5","permalink":"https://sitonlotus.github.io/tags/ES5/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sitonlotus.github.io/tags/JavaScript/"}]},{"title":"es6知识点整理及精选面试题详解","slug":"es6","date":"2020-05-27T00:35:31.000Z","updated":"2020-05-28T03:07:13.617Z","comments":true,"path":"2020/05/27/es6/","link":"","permalink":"https://sitonlotus.github.io/2020/05/27/es6/","excerpt":"","text":"知识点整理 面试题 关于Promise的使用1) 用Promise实现延迟函数delay(面试题) 12345678910function delay(time)&#123; return new Promise((resolve)=&gt;&#123; setTimeout(()=&gt;&#123; resolve(); &#125;,time) &#125;)&#125;delay(1000).then(()=&gt;&#123; console.log(\"resolved\")&#125;)","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://sitonlotus.github.io/tags/ES6/"},{"name":"前端","slug":"前端","permalink":"https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"知识点","slug":"知识点","permalink":"https://sitonlotus.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"name":"面试","slug":"面试","permalink":"https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"div水平垂直居中.md","slug":"making_div_centering","date":"2020-05-12T02:24:10.000Z","updated":"2020-05-28T13:05:05.843Z","comments":true,"path":"2020/05/12/making_div_centering/","link":"","permalink":"https://sitonlotus.github.io/2020/05/12/making_div_centering/","excerpt":"","text":"这篇文章主要是写关于在前端工作中，如何将一个div水平垂直居中。 这里有很多方法，下面介绍好几种常见的方法","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"面试","slug":"面试","permalink":"https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"使用hexo写博客并发布","slug":"making_blog_by_hexo","date":"2020-05-12T00:59:51.505Z","updated":"2020-05-28T05:27:26.853Z","comments":true,"path":"2020/05/12/making_blog_by_hexo/","link":"","permalink":"https://sitonlotus.github.io/2020/05/12/making_blog_by_hexo/","excerpt":"","text":"使用hexo搭建博客，唯一一个方便就是将自己的博客放在GitHub仓库里面，只需要访问即可，这可以省去购买服务器和域名的钱，同时也省去了维护的成本。 使用hexo搭建博客前期准备对于前期的准备，就是需要安装nodejs、git，对于编辑器的话，自己按照自己的喜好选择即可。 nodejs主要使用的是其npm管理工具，主要是安装一些依赖包，而git的话使用它推送到远程仓库。这里就不介绍这两的安装过程，对于小白的话，百度一下教程随处可见，这里就不花过多的语言来描述。 全局安装hexo1$ npm install -g hexo-cli 新建博客系统同时初始化1$ hexo init \"blog-name\" 或者是 123$ mkdir \"blog-name\"$ cd \"blog-name\"$ hexo init 这里需要下载一些文件，以及对主题的拉取，事件会稍微久点，等待拉取完后，进行一下操作，测试博客。 123$ hexo clean$ hexo g$ hexo s 注意：hexo clean命令是将项目的缓存进行清理，hexo g是生成博客的静态文件，hexo s是在本地开启预览的服务器。 配置部署首先在github仓库中，新建一个仓库，其仓库名一定是&quot;GitHub账户名&quot;.github.io，并设置开放的仓库。 配置的话，在根目录下_config.yml文件中，在最后的deploy中，需要配置一下内容 1234deploy: type: &#39;git&#39; repository: &#39;仓库名&#39; branch: master 发布博客1$ hexo d 如果你配置了私钥，此时就不需要输入GitHub账号和密码，反之则会自己输入。 后期维护修改更换主题在 设置关于、标签、分类、归档、时间线写文章发布","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"博客","slug":"博客","permalink":"https://sitonlotus.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}],"categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://sitonlotus.github.io/tags/Vue/"},{"name":"前端","slug":"前端","permalink":"https://sitonlotus.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"面试","slug":"面试","permalink":"https://sitonlotus.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"WEB","slug":"WEB","permalink":"https://sitonlotus.github.io/tags/WEB/"},{"name":"React","slug":"React","permalink":"https://sitonlotus.github.io/tags/React/"},{"name":"开发环境","slug":"开发环境","permalink":"https://sitonlotus.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"name":"知识点","slug":"知识点","permalink":"https://sitonlotus.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"name":"ES5","slug":"ES5","permalink":"https://sitonlotus.github.io/tags/ES5/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sitonlotus.github.io/tags/JavaScript/"},{"name":"ES6","slug":"ES6","permalink":"https://sitonlotus.github.io/tags/ES6/"},{"name":"博客","slug":"博客","permalink":"https://sitonlotus.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}